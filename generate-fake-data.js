const { faker } = require("@faker-js/faker");

const createRandomProduct = () => {
  return {
    id: faker.string.uuid(),
    name: faker.commerce.productName(),
    price: faker.commerce.price(),
    slug: faker.helpers.slugify(faker.commerce.productName()),
    permalink: faker.internet.url(),
    date_created: faker.date.recent(),
    date_created_gmt: faker.date.recent(),
    date_modified: faker.date.recent(),
    date_modified_gmt: faker.date.recent(),
    type: faker.helpers.arrayElement(["simple", "variable"]),
    status: faker.helpers.arrayElement(["publish", "private", "draft"]),
    featured: faker.datatype.boolean(),
    catalog_visibility: faker.helpers.arrayElement([
        "visible",
        "catalog",
        "search",
        "hidden",
    ]),
    description: faker.commerce.productDescription(),
    short_description: faker.commerce.productDescription(),
    sku: faker.string.uuid(),
    price: faker.commerce.price(),
    regular_price: faker.commerce.price(),
    sale_price: faker.commerce.price(),
    date_on_sale_from: faker.date.recent(),
    date_on_sale_from_gmt: faker.date.recent(),
    date_on_sale_to: faker.date.recent(),
    date_on_sale_to_gmt: faker.date.recent(),
    purchasable: faker.datatype.boolean(),
    total_sales: faker.number.int(),
    virtual: faker.datatype.boolean(),
    downloadable: faker.datatype.boolean(),
    downloads: [],
    download_limit: faker.number.int(),
    download_expiry: faker.number.int(),
    external_url: faker.internet.url(),
    button_text: faker.commerce.productName(),
    tax_status: faker.helpers.arrayElement(["taxable", "shipping", "none"]),
    tax_class: faker.commerce.productName(),
    manage_stock: faker.datatype.boolean(),
    stock_quantity: faker.number.int(),
    stock_status: faker.helpers.arrayElement(["instock", "outofstock"]),
    backorders: faker.helpers.arrayElement(["no", "notify", "yes"]),
    backorders_allowed: faker.datatype.boolean(),
    backordered: faker.datatype.boolean(),
    sold_individually: faker.datatype.boolean(),
    weight: faker.commerce.productName(),
    dimensions: {
        length: faker.commerce.productName(),
        width: faker.commerce.productName(),
        height: faker.commerce.productName(),
    },
    shipping_required: faker.datatype.boolean(),
    shipping_taxable: faker.datatype.boolean(),
    shipping_class: faker.commerce.productName(),
    shipping_class_id: faker.number.int(),
    reviews_allowed: faker.datatype.boolean(),
    average_rating: faker.number.int(),
    rating_count: faker.number.int(),
    related_ids: [],
    upsell_ids: [],
    cross_sell_ids: [],
    parent_id: faker.number.int(),
    purchase_note: faker.commerce.productName(),
    categories: [
        {
            id: faker.number.int(),
            name: faker.commerce.productName(),
            slug: faker.helpers.slugify(faker.commerce.productName()),
        },        {
            id: faker.number.int(),
            name: faker.commerce.productName(),
            slug: faker.helpers.slugify(faker.commerce.productName()),
        },        {
            id: faker.number.int(),
            name: faker.commerce.productName(),
            slug: faker.helpers.slugify(faker.commerce.productName()),
        },        {
            id: faker.number.int(),
            name: faker.commerce.productName(),
            slug: faker.helpers.slugify(faker.commerce.productName()),
        },        {
            id: faker.number.int(),
            name: faker.commerce.productName(),
            slug: faker.helpers.slugify(faker.commerce.productName()),
        },
    ],
    tags: [],
    images: [
        {
            id: faker.number.int(),
            date_created: faker.date.recent(),
            date_created_gmt: faker.date.recent(),
            date_modified: faker.date.recent(),
            date_modified_gmt: faker.date.recent(),
            src: faker.internet.url(),
            name: faker.commerce.productName(),
            alt: faker.commerce.productName(),
        },
        {
            id: faker.number.int(),
            date_created: faker.date.recent(),
            date_created_gmt: faker.date.recent(),
            date_modified: faker.date.recent(),
            date_modified_gmt: faker.date.recent(),
            src: faker.internet.url(),
            name: faker.commerce.productName(),
            alt: faker.commerce.productName(),
        },        {
            id: faker.number.int(),
            date_created: faker.date.recent(),
            date_created_gmt: faker.date.recent(),
            date_modified: faker.date.recent(),
            date_modified_gmt: faker.date.recent(),
            src: faker.internet.url(),
            name: faker.commerce.productName(),
            alt: faker.commerce.productName(),
        },        {
            id: faker.number.int(),
            date_created: faker.date.recent(),
            date_created_gmt: faker.date.recent(),
            date_modified: faker.date.recent(),
            date_modified_gmt: faker.date.recent(),
            src: faker.internet.url(),
            name: faker.commerce.productName(),
            alt: faker.commerce.productName(),
        },        {
            id: faker.number.int(),
            date_created: faker.date.recent(),
            date_created_gmt: faker.date.recent(),
            date_modified: faker.date.recent(),
            date_modified_gmt: faker.date.recent(),
            src: faker.internet.url(),
            name: faker.commerce.productName(),
            alt: faker.commerce.productName(),
        },
    ],
    attributes: [],
    default_attributes: [],
    variations: [],
    grouped_products: [],
    menu_order: faker.number.int(),
    meta_data: [],
    _links: [],
  };
};

const createRandomProducts = (count) => {
    return Array.from({ length: count }, createRandomProduct);
};

module.exports = { createRandomProduct, createRandomProducts };
